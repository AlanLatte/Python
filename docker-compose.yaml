version: '3.8'
services:
  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile

    restart: always

    env_file:
      - .env
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
    depends_on:
      - postgres
      - migrations
      - redis
    ports:
      - ${API_SERVER_PORT}:5000
    command: [
      "poetry", "run", "uvicorn", "app:create_app",
      "--host", "0.0.0.0",
      "--port", '5000'
    ]

  postgres:
    build:
      context: .
      dockerfile: docker/postgresql/Dockerfile

    restart: always

    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DATABASES="test_${POSTGRES_DATABASE_NAME}","${POSTGRES_DATABASE_NAME}"
    ports:
      - ${POSTGRES_PORT}:5432
    volumes:
      - ${POSTGRES_DATA_VOLUME}:/var/lib/postgresql/data/pgdata

  migrations:
    build:
      context: .
      dockerfile: docker/migrations/Dockerfile
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
    depends_on:
      - postgres
    command: [
        "bash", "./scripts/wait-for-server.sh", "postgres:5432", "-t", "120",
        "--",
        "poetry", "run", "python", "-m", "scripts.migrate"
    ]

  redis:
    build:
      context: .
      dockerfile: docker/redis/Dockerfile

    env_file:
      - .env
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379

    volumes:
      - ${REDIS_DATA_VOLUME}:/data

  grafana:
    build:
      context: .
      dockerfile: docker/grafana/Dockerfile
    env_file:
      - .env
    environment:
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - ${GRAFANA_PORT}:3000
    depends_on:
      - prometheus
    volumes:
      - ${GRAFANA_VOLUME}:/var/lib/grafana
      - ./docker/grafana/provisioning/:/etc/grafana/provisioning/

  prometheus:
    image: prom/prometheus:latest

    user: root
    env_file:
      - .env
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./src/prometheus:/prometheus
    depends_on:
      - centrifugo
      - api
    command:
      - --config.file=/etc/prometheus/prometheus.yml

  centrifugo:
    build:
      context: .
      dockerfile: docker/centrifugo/Dockerfile
    env_file:
      - .env
    environment:
      - API_SERVER=api
      - API_SERVER_PORT=5000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - ${API_CENTRIFUGO_PORT}:8000
    volumes:
      - ${API_CENTRIFUGO_DATA_VOLUME}:/var/log/centrifugo
    depends_on:
      - api
    command: [ "sh", "init.centrifugo.sh" ]

networks:
  default:
    driver: bridge
