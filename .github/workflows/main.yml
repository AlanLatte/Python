# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Check code quality

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

env:
   FILES_TO_CHECK: 'app tests'
   BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

jobs:
  linters:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Install poetry
      run: pipx install poetry

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"
        cache: 'poetry'
    - run: poetry install --only main

    - name: Start procesing Linters for code quality
      run: |
        poetry install --only linters,formatters

        poetry run flake8 ${{ env.FILES_TO_CHECK }}
        poetry run docformatter -cr ${{ env.FILES_TO_CHECK }}
        poetry run black --check ${{ env.FILES_TO_CHECK }}
#        poetry run mypy ${{ env.FILES_TO_CHECK }}

  sasts:
    needs: [linters]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Install poetry
      run: pipx install poetry

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"
        cache: 'poetry'
    - run: poetry install --only main

    - name: Start procesing Sasts for code quality
      run: |
        poetry install --only sasts

        poetry run bandit -r ${{ env.FILES_TO_CHECK }} -x tests
        poetry run safety check --full-report

  tests:
    runs-on: self-hosted
    needs: [linters, sasts]

    name: Deploy on test service
    steps:
    - name: Deploy code on the remote server
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        port: ${{ secrets.PORT }}
        script: |
            cd /home/fastapi_template/TestPython
            git fetch --all || true
            git pull origin main || true
            git checkout ${{ env.BRANCH_NAME }} || true
            git pull || true
            docker compose -f ./docker-compose.tests.yaml up --build -d postgres migrations

#      # Run tests
    - uses: actions/checkout@v3
    - name: Install poetry
      run: pipx install poetry --force
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"
        cache: 'poetry'

    - run: poetry install --only main

    - name: Dump env to file.
      run: echo "${{ secrets.ENV_FILE_DEV }}" > .env
    - name: Start tests with pytest
      run: |
        poetry install --only tests
        poetry run pytest tests
